// Pg.11
// Case1 : ParamType is a Reference or Pointer but not a Universal Reference

#pragma once

// Case1 : ParamType is a Reference or Pointer but not a Universal Reference
template<typename T>
void f( T& param )                  // param is a reference
{
}

template<typename T>
void f2( const T& param )           // param is a reference to const
{
}

template<typename T>
void f3( T* param )                 // param is now a pointer
{
}

int main()
{
    // Case 1
    int x = 27;         // x    lvalue      int         is an int
    const int cx = x;   // cx   lvalue      const int   is a const int
    const int& rx = x;  // rx   lvalue      const int&  is a reference to x as a const int

    f( x );             // T    int         param type  int&
    f( cx );            // T    const int   param type  const int&
    f( rx );            // T    const int   param type  const int&

    f2( x );            // T    int         param type  const int&
    f2( cx );           // T    int         param type  const int&
    f2( rx );           // T    int         param type  const int&

    const int *px = &x; // px is a ptr to x as a const int
    f3( &x );           // T    int         param type  int*
    f3( px );           // T    const int   param type  const int*

    return 0;
}