00 Introduction
14-Sep-2017


TERMINOLOGY


Move semantics
C++11 most pervasive feature
The foundation of move semantics is distinguishing rvalue expressions from lvalue expressions

rvalues indicate objects eligible for move operations
lvalues generally don't!

rvalues : temporary objects returned from functions
lvalues : objects you can refer to by name, by following a pointer or lvalue reference


Q.
Can you take an object's address?
Yes		lvalue
No		rvalue


NB:
Type of an expression is independent of whether expression is lvalue or rvalue
Give type T, you can have lvalues of type T and rvalues of type T

IMPORTANT
Remember this when dealing with a parameter of rvalue reference type [Widget&& rhs]
because the [function] parameter itself is an lvalue


Example
class Widget
{
public:
	Widget( Widget&& rhs );		// rhs parameter is an lvalue although
								// it has an rvalue reference [&&]type
};


rhs parameter is an lvalue 
ALL parameters are lvalues 		[because you can take rhs address]


Copy vs. Move
copy of rvalue	move constructed
copy of lvalue	copy constructed

Move operations		move constructor	move assignment
Copy operations		copy constructor	copy assignment


Parameters vs. Arguments
argument		expression passed at function call site		lvalues OR rvalues
parameter		arguments used to initialize function		lvalues

e.g.
void someFunc( Widget w )		// w is [function] parameter
Widget wid;
someFunc( wid );				// wid is argument
someFunc( std::move( wid ) )	// std::move(wid) is the argument


Parameters
void someFunc( Widget w );		// w is [function] parameter


Arguments
Widget wid;
someFunc( wid );				// wid is argument
someFunc( std::move( wid ) )	// std::move(wid) is the argument


Perfect forwarding
Argument passed to function [parameter] passed to another function
such that  original argument's rvalueness or lvalueness preserved


Function Object
any type that supports operator() member function		acts like a function
also include callable objects in C++ e.g. member function pointers


Closures
Function objects created through lambda expresions


Analoguous
function templates		templates that generate functions
template functions		functions generated from function templates

class templates			templates that generate classes
template classes		classes generated from class templates


Undefined behavior
runtime behavior is unpredictable

e.g.
* include using square brackets ("[]") to index beyond the bounds of std::vector
* dereferencing an uninitialized iterator
* engaging in data race (i.e. two or more threads write simultaneously to memory location)